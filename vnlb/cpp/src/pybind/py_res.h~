

#pragma once


/// Arguments to brute-force GPU k-nearest neighbor searching
struct VnlbParams {
      VnlbParams() :
        t(0),
	h(0),
	w(0),
	c(0),
	ps(0),
	k(0),
	use_clean(0),
	noisy(nullptr),
	clean(nullptr),
	denoised(nullptr) {}

    /// image dims
    int t; // nframes
    int h; // height
    int w; // width
    int c; // color
    int ps; // patchsize radius on one direction
    int k; // the num of neighbors
    bool use_clean;

    // noisy image to denoise
    const float* noisy;
    const float* clean;
    const float* denoised;

};

/// A wrapper for gpu/impl/Distance.cuh to expose direct brute-force k-nearest
/// neighbor searches on an externally-provided region of memory (e.g., from a
/// pytorch tensor).
/// The data (vectors, queries, outDistances, outIndices) can be resident on the
/// GPU or the CPU, but all calculations are performed on the GPU. If the result
/// buffers are on the CPU, results will be copied back when done.
///
/// All GPU computation is performed on the current CUDA device, and ordered
/// with respect to resources->getDefaultStreamCurrentDevice().
///
/// For each vector in `queries`, searches all of `vectors` to find its k
/// nearest neighbors with respect to the given metric

void runVnlb(const VnlbParams& args);


